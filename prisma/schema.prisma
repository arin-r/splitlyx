// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    groups               Group[]
    expenseContributions ExpenseContribution[]
    groupContributions   GroupContribution[]
    repaymentPayer       Repayment[]           @relation("repayment_payingUser")
    repaymentReceiver    Repayment[]           @relation("repayment_receivingUser")
    transactionPayer     RecordedTransaction[] @relation("transaction_payingUser")
    transactionReceiver  RecordedTransaction[] @relation("transaction_receivingUser")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Group {
    id                   String                @id @default(cuid())
    name                 String
    members              User[]
    createdAt            DateTime              @default(now())
    expenses             Expense[]
    groupContributions   GroupContribution[]
    repayments           Repayment[]
    recordedTransactions RecordedTransaction[]
}

model Expense {
    id                   String                @id @default(cuid())
    group                Group                 @relation(fields: [groupId], references: [id])
    groupId              String
    expenseContributions ExpenseContribution[]
    totalExpense         Float
    name                 String
}

model ExpenseContribution {
    id          String  @id @default(cuid())
    user        User    @relation(fields: [userId], references: [id])
    userId      String
    paid        Float
    actualShare Float
    expense     Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
    expenseId   String
}

model GroupContribution {
    id          String @id @default(cuid())
    user        User   @relation(fields: [userId], references: [id])
    userId      String
    paid        Float
    actualShare Float
    group       Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId     String
}

// Repayment is a model to store suggested repayments which minimize the number of transactions
// RecordedTransaction is a model to store all recorded transactions which occur between members of a group
model Repayment {
    id              String @id @default(cuid())
    payerId         String
    receiverId      String
    payer           User   @relation("repayment_payingUser", fields: [payerId], references: [id])
    receiver        User   @relation("repayment_receivingUser", fields: [receiverId], references: [id])
    repaymentAmount Float
    group           Group  @relation(fields: [groupId], references: [id])
    groupId         String
}

model RecordedTransaction {
    id                String @id @default(cuid())
    payerId           String
    receiverId        String
    payer             User   @relation("transaction_payingUser", fields: [payerId], references: [id])
    receiver          User   @relation("transaction_receivingUser", fields: [receiverId], references: [id])
    transactionAmount Float
    group             Group  @relation(fields: [groupId], references: [id])
    groupId           String
}
